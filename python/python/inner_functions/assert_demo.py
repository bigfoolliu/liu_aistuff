#!/usr/bin/env python3


"""
assert 断言 

1. 可以用来做参数的检查，防止出现 bug
2. 当出现问题时可以根据消息快速定位至问题处，提高 debug 效率
3. if和assert两者的使用场景不太一样,在重要的环节，比如判断用户是否是管理员，那么必须使用 if，因为 assert 是可以通过 -o 参数来关闭的。在一些非重要的环节，比如写代码的初期，程序还不够健壮，使用 assert 来断言，写代码的行数更少，也更优雅。其实，有没有 assert ，都不应该影响程序的正常运行，assert 的作用是可以让我们后期维护代码更加方便
4. 合理的使用 assert 可以增加代码的健壮度，同时也方便开发人员定位问题。当程序中出现的各种情况都是预料之中的时候，应该使用 if 来处理，当程序中要限定一些条件时，可以方便的使用 assert 简化处理。需要注意的是无论有没有 assert，都不应该影响程序的正常运行，assert 的作用是可以让我们后期维护代码更加方便，另外对于程序在运行时抛出的异常，看情况要进行捕获与否
"""


def basic_demo():
    # a = []
    a = {}

    # 下面的操作都是基于a为list来操作，可以避免下面操作出现意外
    assert isinstance(a, list), "输入a必须为list"
    print(f"a: {a}")
    a.append(1)
    print(f"a: {a}")


if __name__ == "__main__":
    basic_demo()

